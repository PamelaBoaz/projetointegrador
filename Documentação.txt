RAIZAGRO
Isabelle, Luccas, Pamela, Thiago, Witer


tb_usuario

id (long): Indentificador usuário.
nomeCompleto (String): Realizar a identificação do usuário
email (String): Utilizar como login (será único por usuário)
senha (String): Senha para acesso ao aplicativo

tb_tema
id (long): Indentificador tema.
nome(String): Mostrar a nome do tema (Legumes, Verduras, Flores).
ativo (boolean): Mostrar se o tema está ativo.
descricao (String): Descrever o tema.

tb_postagem
id (long): Indentificador postagem.
dataPost (TIMESTAMP): Identificar data e hora da postagem
descricao (String): Mostrar informações do produto que está a venda
foto (blob): Usuário poderá adicionar fotos do produto a venda
contato(String):Campo para adicionar contato de quem fez a postagem para futura conexão com interessados
localizacao (String): Mostrar a localização do usuario responsavel pela postagem.
usuario_id (long)
tema_id (long)

----------------------------------------------------------------------------------------------------------------//--------------------------------------------------------------------------------------------------------------------------
#Model

********Tema********

-id long : Indentificador de tema 

-nome String: nome  do tema (Legumes, Verduras, Flores).

-descricao String: Descrever o tema.

-ativo boolean: Mostrar se o tema está ativo.


#Repository

********TemaRepository********

-public List<Tema> findAllByNomeContainingIgnoreCase(String categoria) : Método de buscar por nomes da tabela tema;

-public List<Tema> findByDescricaoContainingIgnoraCase(String descricao); Método de busca por descrição da tabela tema;

#Controller

********TemaController********
  
-TemaRepository repository :@Autowired Instanciação da interface TemaRepository para utilização de metodos específicos; 

-public ResponseEntity<List<Tema>> findAll():@GetMapping  Método de consulta dos dados em geral da tabela tema; 

-public ResponseEntity<Tema> findById(@PathVariable Long id): @GetMapping("/{id}") Método de consulta por id da tabela tema;

-public ResponseEntity<List<Tema>> findByNome(@PathVariable String nome):@GetMapping("/nome/{nome}") Método de consulta por nome especificado; 

-public ResponseEntity<List<Tema>> findByDescricao(@PathVariable String descricao):@GetMapping("/descricao/{descricao}")  Método de consulta por descrição especificada; 

-public ResponseEntity<Tema> post(@RequestBody Tema tema):@PostMapping método de inserção de dados na tabela tema;

-public ResponseEntity<Tema> put(@RequestBody Tema tema):@PutMapping método de atualização de dados da tabela tema;

-public void delete(@PathVariable Long id):@DeleteMapping("/{id}") método de deleção de dados por id da tabela tema;  


******PostagemController********
-PostagemRepository repository :@Autowired Instanciação da interface PostagemRepository para utilização de metodos específicos; 

-public ResponseEntity<List<Postagem>> findAll():@GetMapping  Método de consulta dos dados em geral da tabela postagem; 

-public ResponseEntity<Postagem> findById(@PathVariable Long id): @GetMapping("/{id}") Método de consulta por id da tabela postagem;

-public ResponseEntity<List<Postagem>> findByLocalizacao(@PathVariable String lcalizacao):@GetMapping("/localizacao/{localizacao}") Método de consulta por localização especifica; 

-public ResponseEntity<List<Postagem>> findByContato(@PathVariable String contato):@GetMapping("/contato/{contato}")  Método de consulta de contato; 

-public ResponseEntity<Postagem> post(@RequestBody Postagem postagem):@PostMapping método de inserção de dados na tabela postagem;

-public ResponseEntity<Postagem> put(@RequestBody Postagem postagem):@PutMapping método de atualização de dados da tabela postagem;

-public void delete(@PathVariable Long id):@DeleteMapping("/{id}") método de deleção de dados por id da tabela usuario;

*****UsuarioController********
-UsuaruiRepository repository :@Autowired Instanciação da interface UsuarioRepository para utilização de métodos específicos; 

-public ResponseEntity<List<Usuario>> findAll():@GetMapping  Método de consulta dos dados em geral da tabela usuario; 

-public ResponseEntity<Usuario> findById(@PathVariable Long id): @GetMapping("/{id}") Método de consulta por id da tabela usuario;

**-public ResponseEntity<List<Usuario>> findByNomeCompleto(@PathVariable String nomeCompleto):@GetMapping("/nomeCompleto/{nomeCompleto}") Método de consulta por nome completo especificado; 

-public ResponseEntity<Usuario> post(@RequestBody Usuario usuario):@PostMapping método de inserção de dados na tabela usuario;

-public ResponseEntity<Postagem> put(@RequestBody Postagem postagem):@PutMapping método de atualização de dados da tabela usuario;

-public void delete(@PathVariable Long id):@DeleteMapping("/{id}") método de deleção de dados por id da tabela usuario;






